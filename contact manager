import tkinter as tk
from tkinter import messagebox, simpledialog
import json

class ContactManagerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Contact Manager")
        self.root.geometry("350x400")

        self.contacts = []
        self.load_contacts()

        
        self.title_label = tk.Label(root, text="Contact Manager", font=('Helvetica', 16), bg='#4CAF50', fg='white')
        self.title_label.pack(pady=10, fill=tk.X)

        self.frame = tk.Frame(root, bg='#E8F5E9')
        self.frame.pack(pady=10, padx=10, fill=tk.X)

        self.name_label = tk.Label(self.frame, text="Name:", bg='#E8F5E9')
        self.name_label.grid(row=0, column=0, padx=10, pady=5, sticky='e')
        
        self.name_entry = tk.Entry(self.frame, width=30)
        self.name_entry.grid(row=0, column=1, padx=10, pady=5)
        
        self.phone_label = tk.Label(self.frame, text="Phone Number:", bg='#E8F5E9')
        self.phone_label.grid(row=1, column=0, padx=10, pady=5, sticky='e')
        
        self.phone_entry = tk.Entry(self.frame, width=30)
        self.phone_entry.grid(row=1, column=1, padx=10, pady=5)
        
        self.email_label = tk.Label(self.frame, text="Email:", bg='#E8F5E9')
        self.email_label.grid(row=2, column=0, padx=10, pady=5, sticky='e')
        
        self.email_entry = tk.Entry(self.frame, width=30)
        self.email_entry.grid(row=2, column=1, padx=10, pady=5)
        
        self.address_label = tk.Label(self.frame, text="Address:", bg='#E8F5E9')
        self.address_label.grid(row=3, column=0, padx=10, pady=5, sticky='e')
        
        self.address_entry = tk.Entry(self.frame, width=30)
        self.address_entry.grid(row=3, column=1, padx=10, pady=5)
        
    
        self.add_button = tk.Button(root, text="Add Contact", command=self.add_contact, bg='#4CAF50', fg='white', relief=tk.RAISED)
        self.add_button.pack(pady=5, padx=10, fill=tk.X)
        
        self.view_button = tk.Button(root, text="View Contacts", command=self.view_contacts, bg='#2196F3', fg='white', relief=tk.RAISED)
        self.view_button.pack(pady=5, padx=10, fill=tk.X)
        
        self.search_button = tk.Button(root, text="Search Contact", command=self.search_contact, bg='#FF5722', fg='white', relief=tk.RAISED)
        self.search_button.pack(pady=5, padx=10, fill=tk.X)
        
        self.update_button = tk.Button(root, text="Update Contact", command=self.update_contact, bg='#FFC107', fg='white', relief=tk.RAISED)
        self.update_button.pack(pady=5, padx=10, fill=tk.X)
        
        self.delete_button = tk.Button(root, text="Delete Contact", command=self.delete_contact, bg='#F44336', fg='white', relief=tk.RAISED)
        self.delete_button.pack(pady=5, padx=10, fill=tk.X)
        
        self.result_label = tk.Label(root, text="", font=('Helvetica', 12), bg='#E8F5E9')
        self.result_label.pack(pady=10, padx=10, fill=tk.X)
    
    def load_contacts(self):
        try:
            with open("contacts.json", "r") as file:
                self.contacts = json.load(file)
        except FileNotFoundError:
            self.contacts = []
    
    def save_contacts(self):
        with open("contacts.json", "w") as file:
            json.dump(self.contacts, file)
    
    def add_contact(self):
        name = self.name_entry.get()
        phone = self.phone_entry.get()
        email = self.email_entry.get()
        address = self.address_entry.get()
        
        if not name or not phone:
            messagebox.showwarning("Input Error", "Name and Phone Number are required.")
            return
        
        contact = {
            "name": name,
            "phone": phone,
            "email": email,
            "address": address
        }
        self.contacts.append(contact)
        self.save_contacts()
        messagebox.showinfo("Success", "Contact added successfully.")
        self.clear_entries()
    
    def view_contacts(self):
        contacts_info = "\n".join([f"{c['name']} - {c['phone']}" for c in self.contacts])
        if contacts_info:
            self.result_label.config(text=f"Contacts:\n{contacts_info}")
        else:
            self.result_label.config(text="No contacts available.")
    
    def search_contact(self):
        search_term = simpledialog.askstring("Search", "Enter name or phone number:")
        results = [c for c in self.contacts if search_term.lower() in c['name'].lower() or search_term in c['phone']]
        
        if results:
            results_info = "\n".join([f"Name: {c['name']}\nPhone: {c['phone']}\nEmail: {c['email']}\nAddress: {c['address']}\n" for c in results])
            self.result_label.config(text=f"Search Results:\n{results_info}")
        else:
            self.result_label.config(text="No contacts found.")
    
    def update_contact(self):
        name = simpledialog.askstring("Update Contact", "Enter the name of the contact to update:")
        contact = next((c for c in self.contacts if c['name'].lower() == name.lower()), None)
        
        if contact:
            new_name = simpledialog.askstring("Update Contact", "Enter new name (leave empty to keep current):", initialvalue=contact['name'])
            new_phone = simpledialog.askstring("Update Contact", "Enter new phone number (leave empty to keep current):", initialvalue=contact['phone'])
            new_email = simpledialog.askstring("Update Contact", "Enter new email (leave empty to keep current):", initialvalue=contact['email'])
            new_address = simpledialog.askstring("Update Contact", "Enter new address (leave empty to keep current):", initialvalue=contact['address'])
            
            if new_name:
                contact['name'] = new_name
            if new_phone:
                contact['phone'] = new_phone
            if new_email:
                contact['email'] = new_email
            if new_address:
                contact['address'] = new_address
            
            self.save_contacts()
            messagebox.showinfo("Success", "Contact updated successfully.")
        else:
            messagebox.showwarning("Not Found", "Contact not found.")
    
    def delete_contact(self):
        name = simpledialog.askstring("Delete Contact", "Enter the name of the contact to delete:")
        contact = next((c for c in self.contacts if c['name'].lower() == name.lower()), None)
        
        if contact:
            self.contacts.remove(contact)
            self.save_contacts()
            messagebox.showinfo("Success", "Contact deleted successfully.")
        else:
            messagebox.showwarning("Not Found", "Contact not found.")
    
    def clear_entries(self):
        self.name_entry.delete(0, tk.END)
        self.phone_entry.delete(0, tk.END)
        self.email_entry.delete(0, tk.END)
        self.address_entry.delete(0, tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = ContactManagerApp(root)
    root.mainloop()
