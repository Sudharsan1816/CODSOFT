import tkinter as tk
from tkinter import simpledialog, messagebox
import string
import random

class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Generator")
        
        self.label = tk.Label(root, text="Password Generator", font=('Helvetica', 16))
        self.label.pack(pady=10)
        
        self.length_label = tk.Label(root, text="Enter the desired length of the password:")
        self.length_label.pack(pady=5)
        
        self.length_entry = tk.Entry(root, width=5)
        self.length_entry.pack(pady=5)
        
        self.complexity_label = tk.Label(root, text="Select complexity:")
        self.complexity_label.pack(pady=5)
        
        self.lowercase_var = tk.IntVar()
        self.uppercase_var = tk.IntVar()
        self.digits_var = tk.IntVar()
        self.symbols_var = tk.IntVar()
        
        self.lowercase_check = tk.Checkbutton(root, text="Include lowercase letters", variable=self.lowercase_var)
        self.lowercase_check.pack(anchor='w')
        
        self.uppercase_check = tk.Checkbutton(root, text="Include uppercase letters", variable=self.uppercase_var)
        self.uppercase_check.pack(anchor='w')
        
        self.digits_check = tk.Checkbutton(root, text="Include digits", variable=self.digits_var)
        self.digits_check.pack(anchor='w')
        
        self.symbols_check = tk.Checkbutton(root, text="Include symbols", variable=self.symbols_var)
        self.symbols_check.pack(anchor='w')
        
        self.generate_button = tk.Button(root, text="Generate Password", command=self.generate_password)
        self.generate_button.pack(pady=10)
        
        self.password_label = tk.Label(root, text="", font=('Helvetica', 12))
        self.password_label.pack(pady=10)
    
    def generate_password(self):
        length = self.length_entry.get()
        try:
            length = int(length)
        except ValueError:
            messagebox.showwarning("Invalid input", "Please enter a valid number for the length.")
            return
        
        if length < 1:
            messagebox.showwarning("Invalid length", "Password length should be at least 1.")
            return
        
        characters = ""
        if self.lowercase_var.get():
            characters += string.ascii_lowercase
        if self.uppercase_var.get():
            characters += string.ascii_uppercase
        if self.digits_var.get():
            characters += string.digits
        if self.symbols_var.get():
            characters += string.punctuation
        
        if not characters:
            messagebox.showwarning("Invalid selection", "Please select at least one character set.")
            return
        
        password = ''.join(random.choice(characters) for _ in range(length))
        self.password_label.config(text=f"Generated Password: {password}")

if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()
